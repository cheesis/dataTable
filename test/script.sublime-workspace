{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"fun",
				"fsumQuantity(things)"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "// TODO:\n// send time for custom benchmark\n// preload form from get-request\n\n/*\n MISC\n*/\nArray.prototype.sum = function () {\n  return this.reduce(function(a, b){return a+b;});\n}\n\nArray.prototype.mul = function(arr) {\n  return this.map(function(x, index){\n    return arr[index] * x;\n  });\n}\n\n// number formatting\nnumeral.language('sv', {\n    delimiters: {\n        thousands: ' ',\n        decimal: ','\n    },\n    abbreviations: {\n        thousand: 'k',\n        million: 'm',\n        billion: 'b',\n        trillion: 't'\n    },\n    ordinal : function (number) {\n        return number === 1 ? 'e' : 'e';\n    },\n    currency: {\n        symbol: 'SEK'\n    }\n});\n\n// switch between languages\nnumeral.language('sv');\n\n// from here http://stackoverflow.com/questions/5778020/check-whether-an-input-string-contains-number\nfunction isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nfunction formatNumber(d) {\n  return isNumeric(d) ? numeral(d).format('0,0.0000') : d;\n}\n\nfunction formatNumber2decimals(d) {\n  return isNumeric(d) ? numeral(d).format('0,0.00') : d;\n}\nfunction formatNumber0decimals(d) {\n  return isNumeric(d) ? numeral(d).format('0,0') : d;\n}\n\n/*\n    here we define the sales order table\n*/\n//names of columns in header\nvar sot_base = {\n    section: \"\",\n    columns: [\n          {columnName:\"oid\",displayName:\"Sales Order Ids\"}\n        , {columnName:\"bs\",displayName:\"Buy/Sell\"}\n        , {columnName:\"avgPrice\",displayName:\"Average Price\"}\n        , {columnName:\"quantity\",displayName:\"Quantity\", dataFormater: formatNumber0decimals}\n        , {columnName:\"tradedValue\",displayName:\"Traded Value\", calc:tradedValue}\n        , {columnName:\"pctOfValue\",displayName:\"% of total value\", calc:pctOfValue, dataFormater: formatNumber2decimals}\n    ]\n};\nvar vwap_columns = {\n    section: \"VWAP\",\n    columns: [\n         {columnName:'vwapAvgPrice',displayName:'Average Price'}\n        ,{columnName:'vwapVolume',displayName:'Volume'}\n        ,{columnName:'vwapPart',displayName:'Participation', calc:participation}\n        ,{columnName:'vwapPnL',displayName:'P&L', calc:pnl}\n        ,{columnName:'vwapPnLbps',displayName:'P&L Bps', calc:pnlbps}\n    ]\n};\nvar custom_columns = {\n    section: \"Custom\",\n    columns: [\n         {columnName:'customAvgPrice',displayName:'Average Price'}\n    ]\n};\nvar close_columns = {\n    section: \"Close\",\n    columns: [\n         {columnName:'closePrice',displayName:'Closing Price'},\n         {columnName:'closeDate',displayName:'Closing Date'}\n    ]\n};\nvar arrival_columns = {\n    section: \"Arrival\",\n    columns: [\n         {columnName:'arrivalPrice',displayName:'Arrival Price'}\n    ]\n};\n\n//columns that should have a value in the footer\nvar sot_foot = [\n  {columnName:\"quantity\", calc:fsumQuantity, dataFormater: formatNumber0decimals}, // we need named functions if we want to define them after this\n  {columnName:\"avgPrice\", calc:fAvgPrice},\n  {columnName:\"tradedValue\", calc:tradedValue}\n];\nvar sot_foot_vwap = [\n  {columnName:\"vwapPnL\", calc:fsumVWAPPnL},\n  {columnName:\"vwapPnLbps\", calc:fVWAPPnLbps}\n];\n\nvar sot_foot_close = [],\n    sot_foot_custom = [],\n    sot_foot_arrival =[];\n\nfunction tradedValue(things) {\n  return things.getColInRow(\"avgPrice\") * things.getColInRow(\"quantity\");\n}\nfunction pctOfValue(things) {\n  // var totalValue = things.getColInFootRow(\"avgPrice\") * things.getColInFootRow(\"quantity\");\n  var totalValue = things.getCol(\"avgPrice\").mul(things.getCol(\"quantity\")).sum();\n  return things.getColInRow(\"tradedValue\") / totalValue * 100;\n}\nfunction participation(things) {\n    return things.getColInRow(\"quantity\")/things.getColInRow(\"vwapVolume\")*100;\n}\nfunction pnl(things) {\n  var difference = 0;\n  if (things.getColInRow(\"bs\") == \"B\") {\n    difference = things.getColInRow(\"vwapAvgPrice\") - things.getColInRow(\"avgPrice\");\n  } else if(things.getColInRow(\"bs\") == \"S\"){\n    difference = things.getColInRow(\"avgPrice\") - things.getColInRow(\"vwapAvgPrice\");\n  }\n  else {\n    difference = 0;\n    console.log('buy/sell was neither b nor s in pnl(), it was ' + things.getColInRow(\"bs\"));\n  }\n  return things.getColInRow(\"quantity\") * difference;\n}\nfunction pnlbps(things) {\n  return things.getColInRow(\"vwapPnL\") / (things.getColInRow(\"avgPrice\") * things.getColInRow(\"quantity\")) * 10000;\n}\nfunction fVWAPPnLbps(things) {\n  return things.getColInFootRow(\"vwapPnL\") / (things.getColInFootRow(\"avgPrice\") * things.getColInFootRow(\"quantity\")) * 10000;\n}\n\nfunction fsumQuantity(things) {\n    //this calculates the sum of the column values\n    return things.getCol(\"quantity\").sum();\n};\nfunction fsumVWAPPnL(things) {\n  return things.getCol(\"vwapPnL\").sum();\n};\n\nfunction fAvgPrice(things){\n    var quantities = things.getCol(\"quantity\");\n    var prices = things.getCol(\"avgPrice\");\n\n    return quantities.mul(prices).sum() / quantities.sum();\n}\n\n/*\n    here we define the summary table\n*/\n//names of columns in header\nvar st_left = {\n    section: \"\",\n    columns: [\n          {\n            columnName:\"id\",\n            displayName:\"\"\n          }\n    ]\n};\nvar st_right = {\n    section: \"\",\n    columns: [\n      {columnName:\"nbr\",displayName:\"Number\", calc:countOrders},\n      {columnName:\"nbv\",displayName:\"NBV\", calc:calcNBV}\n    ]\n};\nfunction countOrders(things) {\n  // we refer to a different table so we have to use dataTableSelector functions directly\n  // instead of the helper functions of the passed 'things' object\n  var sides = dataTableSelector.columnSelector(\"sot\", \"bs\");\n  switch (things.getColInRow(\"id\")) {\n    case \"Buy\":\n      return sides.filter(function (a) {\n        return a == \"B\";\n      }).length;\n    case \"Sell\":\n        return sides.filter(function (a) {\n          return a == \"S\";\n        }).length;\n    default:\n      return \"Oops, somebody can't code\";\n  }\n}\nfunction calcNBV(things) {\n  var ourSide = things.getColInRow(\"id\");\n  var sides = dataTableSelector.columnSelector(\"sot\", \"bs\");\n  var tradedValue = dataTableSelector.columnSelector(\"sot\", \"tradedValue\");\n  var tradedValueThisSide = tradedValue.filter(function(v,i){\n    return ourSide.indexOf(sides[i]) == 0; //javascript doesn't have startsWith yet\n  });\n  if (tradedValueThisSide.length > 0) {\n    var totalValue = tradedValueThisSide.sum();\n    if (ourSide == \"Sell\") {\n      return totalValue;\n    } else if(ourSide == \"Buy\"){\n      return totalValue * (-1);\n    } else {\n      return \"Oops, somebody can't code\";\n    }\n  } else {\n    return 0;\n  }\n}\n\nvar st_data = [\n   {id:\"Buy\"},\n   {id:\"Sell\"}\n ];\n var st_foot = [ {columnName:\"nbr\", calc:fCount}, // we need named functions if we want to define them after this\n                 {columnName:\"nbv\", calc:fNBV}\n               ];\n\n function fNBV(things) {\n   return things.getCol(\"nbv\").sum();\n };\n function fCount(things) {\n    return things.getCol(\"nbr\").sum();\n }\n\n// this table does not depend on use input so we build it right away\n var summaryTable = new dataTable(\"st\",[st_left, st_right], \"id\", st_foot, formatNumber0decimals, ['sot']);\n summaryTable.populate(st_data);\n\n\n\n\n//\n// here we handle the user input\n//\nfunction enable_input(input_id) {\n  document.getElementById(input_id).disabled = this.checked;\n}\nfunction getFormData(formId) {\n  var formHash = {};\n  var elements = document.getElementById('mainform').elements;\n  for (var i = 0, element; element = elements[i++];) {\n    switch (element.type) {\n      case \"checkbox\":\n        if (!element['checked'])\n          break;\n        else {\n          formHash[element['name']] = true;\n        }\n      case \"button\":\n      case \"fieldset\":\n        break; //disregard\n      case \"textarea\":\n        formHash[element['name']] = element['value'].split('\\n').filter(function (obj) {\n          if(obj)\n            return true;\n          else\n            return false; //discard empty lines\n        });\n        break;\n      default:\n        console.log(element.type, \"adding\");\n        formHash[element['name']] = element['value'];\n    }\n  }\n  console.log(formHash);\n  return formHash\n}\n\n\nfunction ajaxPost(url, jsonData) {\n  // Return a new promise.\n  return new Promise(function(resolve, reject) {\n    var request = new XMLHttpRequest();\n    request.open(\"POST\", url);\n    request.setRequestHeader(\"Content-type\", \"application/json\");\n    request.onload = function() {\n      if (request.status == 200) {\n        resolve(request.response);  // Resolve the promise with the response text\n      }\n      else {\n        reject(Error(request.statusText));\n      }\n    };\n    // Handle network errors\n    request.onerror = function() {\n      reject(Error(\"Network Error\"));\n    };\n\n    request.send(JSON.stringify(jsonData));\n  });\n}\n\nfunction removeChildren(query) {\n  var set = document.querySelectorAll(query);\n  var arr = Array.prototype.slice.call(set);\n  arr.forEach(function(a) {a.remove();});\n}\n\nfunction addToFooter(id, item) {\n  var bigBox = document.createElement(\"div\");\n  bigBox.id = \"bigBox_\" + id;\n  bigBox.classList.add('bigBox');\n\n  var littleBox = document.createElement(\"div\");\n  littleBox.id = \"littleBox_\" + id;\n  littleBox.classList.add('littleBox');\n\n  var text = document.createTextNode(item);\n\n  document.getElementById('footer').appendChild(bigBox);\n  bigBox.appendChild(littleBox);\n  bigBox.appendChild(text);\n}\n\nfunction markCompleteFooter(id) {\n  var littleBox = document.getElementById('littleBox_' + id);\n  littleBox.classList.add('done');\n\n  var bigBox = document.getElementById('bigBox_' + id);\n  bigBox.classList.add('done');\n}\n\nfunction formCB(formId) {\n  removeChildren(\"#sot > *\");\n  removeChildren(\"#footer > *\");\n\n  var formData = getFormData(formId);\n  var soiIds = formData.soids; //this is sent to query 1\n\n  // build sales order table according to user selection\n  // columns that are always present\n  var sot_definition = [sot_base]; //contains one object (base colmns and section name)\n  var sot_foot_definition = sot_foot; //contains columns as array\n\n  // update footer with expected ajax-calls\n  addToFooter(\"sot_base\", \"base data\");\n  addToFooter(\"sources\", \"sources\");\n  addToFooter(\"venues\", \"venues\");\n\n  // columns that depend on user selection\n  if (formData.arrivalBM) {\n    sot_foot_definition = sot_foot_definition.concat(sot_foot_arrival);\n    sot_definition = sot_definition.concat(arrival_columns);\n    soiIds.forEach(function (a) {\n      addToFooter(\"arrival_\" + a, \"arrival BM data for \" + a);\n    });\n  }\n  if (formData.vwapBM) {\n    sot_foot_definition = sot_foot_definition.concat(sot_foot_vwap);\n    sot_definition = sot_definition.concat(vwap_columns);\n    soiIds.forEach(function (a) {\n      addToFooter(\"vwap_\" + a, \"VWAP BM data for \" + a);\n    });\n  }\n  if (formData.closeBM) {\n    sot_foot_definition = sot_foot_definition.concat(sot_foot_close);\n    sot_definition = sot_definition.concat(close_columns);\n    soiIds.forEach(function (a) {\n      addToFooter(\"close_\" + a, \"Close BM data for \" + a);\n    });\n  }\n  if (formData.customBM) {\n    sot_foot_definition = sot_foot_definition.concat(sot_foot_custom);\n    sot_definition = sot_definition.concat(custom_columns);\n    soiIds.forEach(function (a) {\n      addToFooter(\"custom_\" + a, \"Custom BM data for \" + a);\n    });\n  }\n\n  var myTable = new dataTable(\"sot\",sot_definition, \"oid\", sot_foot_definition, formatNumber);\n\n  ajaxPost('sources', soiIds).then(JSON.parse).then(function (res) {\n    console.log(\"sources\", res);\n    markCompleteFooter('sources');\n  }).catch(function (error) {\n    console.log(\"Failed!\", error);\n  });\n\n  ajaxPost('venues', soiIds).then(JSON.parse).then(function (res) {\n    console.log(\"venues\", res);\n    markCompleteFooter('venues');\n  }).catch(function (error) {\n    console.log(\"Failed!\", error);\n  });\n\n  //handle standard data\n  ajaxPost('baseSoData', soiIds).then(JSON.parse).then(function (response) {\n    console.log(\"Success!\", response);\n    markCompleteFooter(\"sot_base\");\n    return myTable.populate(response);\n  }).then(function (res) {\n    // handle vwap\n    if (formData.vwapBM) {\n      console.log('handling wvap');\n      res.forEach(function (r) {\n        ajaxPost('vwapBM',r).then(JSON.parse).then(function (vwap) {\n          console.log(\"got vwap\", vwap);\n          markCompleteFooter(\"vwap_\" + vwap[0].oid);\n          myTable.populate(vwap);\n        });\n      });\n    }\n    // handle custom\n    if (formData.customBM) {\n      console.log('handling custom');\n      res.forEach(function (r) {\n        ajaxPost('customBM',r).then(JSON.parse).then(function (custom) {\n          console.log(\"got custom\", custom);\n          markCompleteFooter(\"custom_\" + custom[0].oid);\n          myTable.populate(custom);\n        });\n      });\n    }\n  }).then(function (res) {\n    console.log('');\n    console.log('All done');\n    console.log('res',res);\n  }).catch(function (error) {\n    console.log(\"Failed!\", error);\n  });\n}\n",
			"file": "script.js",
			"file_size": 13175,
			"file_write_time": 130810279170671233,
			"settings":
			{
				"buffer_size": 12745,
				"line_ending": "Windows"
			}
		},
		{
			"file": "server.js",
			"settings":
			{
				"buffer_size": 4075,
				"line_ending": "Windows"
			}
		},
		{
			"file": "style.css",
			"settings":
			{
				"buffer_size": 1980,
				"line_ending": "Unix"
			}
		},
		{
			"file": "test.html",
			"settings":
			{
				"buffer_size": 2169,
				"line_ending": "Windows"
			}
		},
		{
			"file": "data.js",
			"settings":
			{
				"buffer_size": 1932,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 81.0,
		"last_filter": "install pa",
		"selected_items":
		[
			[
				"install pa",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Preferences: Browse Packages"
			]
		],
		"width": 416.0
	},
	"console":
	{
		"height": 146.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": false,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/justu_000/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/justu_000/Documents/git/dataTable/test/script.js",
		"/C/Users/justu_000/Documents/git/dataTable/test/test.html"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"mul("
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "script.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12745,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										12660,
										12660
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								12745,
								12745
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7312.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "server.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4075,
						"regions":
						{
						},
						"selection":
						[
							[
								2732,
								2732
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 955.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "style.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1980,
						"regions":
						{
						},
						"selection":
						[
							[
								985,
								985
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 779.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "test.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2169,
						"regions":
						{
						},
						"selection":
						[
							[
								1027,
								1027
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "data.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1932,
						"regions":
						{
						},
						"selection":
						[
							[
								30,
								451
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "script.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
